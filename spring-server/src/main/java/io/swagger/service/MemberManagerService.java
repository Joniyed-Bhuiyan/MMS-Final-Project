package io.swagger.service;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.MemberManager;import io.swagger.repository.MemberManagerRepository;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class MemberManagerService {    private MemberManagerRepository memberManagerRepository;    public MemberManagerService(MemberManagerRepository memberManagerRepository) {        this.memberManagerRepository = memberManagerRepository;    }    public MemberManager saveUser(MemberManager memberManager) throws ResourceAlreadyExistException {        if(!memberManagerRepository.exists(memberManager.getUsername())) {            return memberManagerRepository.save(memberManager);        }else {            throw new ResourceAlreadyExistException(memberManager.getUsername());        }    }    public List<MemberManager> getAllUser() throws ResourceDoesNotExistException {        List<MemberManager> memberManagerList = new ArrayList<>();        memberManagerRepository.findAll().forEach(memberManagerList::add);        if(!memberManagerList.isEmpty()){            return memberManagerList;        }else {            throw new ResourceDoesNotExistException("database empty");        }    }    public MemberManager update(String username, MemberManager memberManager) throws ResourceDoesNotExistException {        if(memberManagerRepository.exists(username)){           memberManager.setUsername(username);           return memberManagerRepository.save(memberManager);        }else{            throw new ResourceDoesNotExistException("user information not found.");        }    }}