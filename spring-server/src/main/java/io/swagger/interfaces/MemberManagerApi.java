/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.interfaces;

import io.swagger.model.MemberManager;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-28T06:14:18.281Z")

@Api(value = "member_manager", description = "the member_manager API")
@RequestMapping(value = "/api/v1")
public interface MemberManagerApi {

    @ApiOperation(value = "add user information with date.", nickname = "addUser", notes = "This table holds the user information.", tags={ "member/manager", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "information saved.."),
        @ApiResponse(code = 400, message = "bad request..") })
    @RequestMapping(value = "/member_manager",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MemberManager> addUser(@ApiParam(value = "daily activities object that needs to be added to the db" ,required=true )  @Valid @RequestBody MemberManager body);


    @ApiOperation(value = "delete user details.", nickname = "deleteUser", notes = " delet details for a single user.", tags={ "member/manager", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully deleted..."),
        @ApiResponse(code = 400, message = "Invalid memeber_id supplied"),
        @ApiResponse(code = 404, message = "information not found") })
    @RequestMapping(value = "/member_manager/{member_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "information of a user to delete",required=true) @PathVariable("member_id") String memberId);


    @ApiOperation(value = "get a user information.", nickname = "getSingleUserInformation", notes = "Returns user information..", response = MemberManager.class, tags={ "member/manager", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = MemberManager.class),
        @ApiResponse(code = 400, message = "Invalid month/year supplied"),
        @ApiResponse(code = 404, message = "information not found") })
    @RequestMapping(value = "/member_manager/{member_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MemberManager> getSingleUserInformation(@ApiParam(value = "information of a user to return",required=true) @PathVariable("member_id") String memberId);


    @ApiOperation(value = "get all member information.", nickname = "getUsers", notes = "return all  the user information.", tags={ "member/manager", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully got all the information..."),
        @ApiResponse(code = 404, message = "no information available on the database..") })
    @RequestMapping(value = "/member_manager",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<MemberManager>> getUsers();


    @ApiOperation(value = "update user details.", nickname = "updateUser", notes = " update details for a single user.", tags={ "member/manager", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful;y update user information"),
        @ApiResponse(code = 400, message = "Invalid user id supplied"),
        @ApiResponse(code = 404, message = "information not found") })
    @RequestMapping(value = "/member_manager/{username}",
        produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<MemberManager> updateUser(@ApiParam(value = "information of a user to uupdate",required=true) @PathVariable("username") String username,@ApiParam(value = "Updated user" ,required=true )  @Valid @RequestBody MemberManager memberManager);

}
